---
- name: Pick up host index
  set_fact:
    homi_results_dir: "{{ homi_output_dir }}/{{ kaia_node_type }}"
    node_num: "{{ inventory_hostname | regex_search('^scn([0-9]+)$', '\\1') | first | int }}"

- name: "Initialization - Copy main-bridge.json"
  become: yes
  copy:
    dest: "{{ kaia_conf.DATA_DIR }}/main-bridges.json"
    content: |
      [{{ mainbridge_kni }}]

- name: Create homi output directory
  become: yes
  file:
    path: "{{ homi_results_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0775
    recurse: yes

- name: "Check nodekey exists"
  become: yes
  stat:
    path: "{{ homi_results_dir }}/keys"
  register: check_nodekey_file

- name: "Generate SCN data & genesis.json by Homi"
  become: yes
  command: homi setup --gen-type local {{ homi_default_options }} --test-num {{ homi_test_account_num }} --cn-num {{ groups.scn|length }} --chainID {{ kaia_service_chain_id }} --network-id {{ kaia_service_network_id }} --p2p-port {{ kaia_conf.PORT }} -o {{ homi_results_dir }}
  when: 
    - not check_nodekey_file.stat.exists
    - '"bridge" in group_names'

- name: Initialization - Check genesis initialized
  become: yes
  stat:
    path: "{{ kaia_conf.DATA_DIR}}/klay"
  register: check_kaia_data_dir

## scn1 only
- name: Update static-nodes.json
  block:
    - name: Copy static-nodes file
      become: yes
      copy:
        dest: "{{ kaia_conf.DATA_DIR }}/static-nodes.json"
        src: "{{ '/'.join((homi_results_dir, 'scripts', 'static-nodes.json')) }}"
        remote_src: yes

    - name: Replace default IP with node IP
      become: yes
      command: "sed -i '0,/0.0.0.0/{s//{{ hostvars[item].ansible_host }}/}' {{ kaia_conf.DATA_DIR }}/static-nodes.json"
      with_items: "{{ groups.scn }}"
      loop_control:
        index_var: index
  when: 
    - '"bridge" in group_names'

- name: Initialization - Copy nodekey file
  become: yes
  copy:
    src: "{{ homi_results_dir }}/keys/nodekey{{ node_num }}"
    dest: "{{ kaia_conf.DATA_DIR }}/nodekey"
    remote_src: yes
  when: 
    - not check_kaia_data_dir.stat.exists
    - '"bridge" in group_names'

- name: Initialization - Copy Genesis File
  become: yes
  copy:
    src: "{{ homi_results_dir }}/scripts/genesis.json"
    dest: "/etc/{{ kaia_daemon_name }}/genesis.json"
    remote_src: yes
  when: 
    - not check_kaia_data_dir.stat.exists
    - '"bridge" in group_names'

## NOT scn1
- name: Copy static-nodes file
  become: yes
  copy:
    dest: "{{ kaia_conf.DATA_DIR }}/static-nodes.json"
    content: "{{ hostvars.scn1.static_nodes }}"
  when: 
    - '"bridge" not in group_names'

- name: Copy nodekey file
  become: yes
  copy:
    dest: "{{ kaia_conf.DATA_DIR }}/nodekey"
    content: "{{ hostvars.scn1['nodekey' + node_num] }}"
  when: 
    - '"bridge" not in group_names'

- name: Copy genesis file
  become: yes
  copy:
    dest: "/etc/{{ kaia_daemon_name }}/genesis.json"
    content: "{{ hostvars.scn1.genesis }}"
  when: 
    - '"bridge" not in group_names'

## End scn1

- name: Convert and get validator data
  become: yes
  kaia_update_validator:
    path: "{{ homi_results_dir }}/keys/validator{{ index+1 }}"
    node_type: "{{ kaia_node_type }}"
    port: "{{ kaia_port }}"
    public_ip: "{{ hostvars[item].ansible_host }}"
    private_ip: "{{ hostvars[item].ansible_private_host }}"
  register: validator_result
  with_items: "{{ groups.scn }}"
  loop_control:
    index_var: index
  when: 
    - '"bridge" in group_names'

- name: Generate validator file
  become: yes
  copy:
    dest: "{{ kaia_conf.DATA_DIR }}/validator{{ index+1 }}"
    content: "{{ item.validator }}"
  with_items: "{{ validator_result.results }}"
  loop_control:
    index_var: index
  when: 
    - '"bridge" in group_names'

- name: Initialization - Genensis
  become: yes
  command: "k{{ kaia_node_type }} init --datadir {{ kaia_conf.DATA_DIR }} /etc/{{ kaia_daemon_name }}/genesis.json"
  when: not check_kaia_data_dir.stat.exists

- name: Set homi output as variabes
  become: yes
  block:
    - name: Read genesis file
      ansible.builtin.slurp:
        src: "{{ '/'.join((homi_results_dir, 'scripts', 'genesis.json')) }}"
      register: genesis_slurpfile

    - name: Read static-nodes file
      ansible.builtin.slurp:
        src: "{{ '/'.join((kaia_conf.DATA_DIR, 'static-nodes.json')) }}"
      register: staticnodes_slurpfile

    - name: Read nodekey file
      ansible.builtin.slurp:
        src: "{{ '/'.join((homi_results_dir, 'keys', 'nodekey' + item)) }}"
      register: nodekey_slurpfile
      with_sequence: start=1 end={{ groups.scn|length }}

    - name: Read validator file
      ansible.builtin.slurp:
        src: "{{ '/'.join((kaia_conf.DATA_DIR, 'validator' + item)) }}"
      register: validator_slurpfile
      with_sequence: start=1 end={{ groups.scn|length }}

    - set_fact:
        genesis: "{{ genesis_slurpfile['content'] | b64decode }}"
        static_nodes: "{{ staticnodes_slurpfile['content'] | b64decode }}"

    - set_fact: {"{{ 'nodekey' + (index+1)|string }}":"{{ item.content | b64decode }}"}
      loop: "{{ nodekey_slurpfile.results }}"
      loop_control:
        index_var: index

    - set_fact: {"{{ 'validator' + (index+1)|string }}":"{{ item.content | b64decode }}"}
      loop: "{{ validator_slurpfile.results }}"
      loop_control:
        index_var: index
  when: '"bridge" in group_names'
